var app = angular.module('app', ['ngRoute', 'ngResource', 'ngAnimate', 'ui.bootstrap']);
app.config(function ($routeProvider) {
    $routeProvider
        .when('/users', {
            templateUrl: '/template/Users.html',
            controller: 'usersController'
        })
        .otherwise({
            redirectTo: '/users'
        })
});
/**
* Created by Kulinenko Roman
*/
app.controller('addUserController', function ($scope, $uibModalInstance) {
    $scope.ok = function () {
        $uibModalInstance.close($scope.user);
    };
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
});
/**
 * Created by Kulinenko Roman
 */
app.controller("usersController", function ($scope, serverService, modalService,
     userService) {

    $scope.itemPerPage = 10;
    $scope.defaultPage = 1;
    $scope.showPage = 5;
    $scope.disableFirstAndPrevBtn = true;
    $scope.disableLastAndNextBtn = true;
    $scope.pages = [];

    $scope.headingTitle = "Data JPA simple CRUD";
    $scope.animationsEnabled = true;
    $scope.data = [];

    loadUsers($scope.defaultPage);

    $scope.updateUser = function (user) {
        serverService.updateUser(user).then(function (answer) {
            loadUsers($scope.data.number);
        });
    };

    $scope.deleteUser = function (user) {
        serverService.deleteUser(user.id).then(function (answer) {
            loadUsers($scope.data.number);
        });

    };

    $scope.openModalAddNewUser = function () {
        modalService.show($scope.animationsEnabled).then(function (users) {
            loadUsers($scope.defaultPage);
        });
    };

    $scope.goToPage = function (page) {
        loadUsers(page);
    }

    $scope.nextPage = function () {
        loadUsers(++$scope.data.number);
    };

    $scope.lastPage = function () {
        loadUsers($scope.data.totalPages);
    };

    $scope.prevPage = function () {
        loadUsers(--$scope.data.number);
    };

    function loadUsers(page) {
        serverService.getUsers(page, $scope.itemPerPage).then(function (answer) {
            $scope.data = answer;
            btnControls();
            $scope.pages = userService.pageControls($scope.defaultPage, $scope.showPage,
                $scope.data.number, $scope.data.totalPages)
        });
    }

    function btnControls() {
        if ($scope.data.totalPages < $scope.defaultPage
            || $scope.data.number == $scope.data.totalPages - 1)
            $scope.disableLastAndNextBtn = true;
        else
            $scope.disableLastAndNextBtn = false;

        $scope.data.number++;

        if ($scope.data.number > $scope.defaultPage)
            $scope.disableFirstAndPrevBtn = false;
        else
            $scope.disableFirstAndPrevBtn = true;
    }
});
/**
 * Created by Kulinenko Roman
 */
app.factory('modalService', function ($q, serverService, $uibModal) {
    return {
        show: function (animationsEnabled) {
            var deferred = $q.defer();
            var modalInstance = $uibModal.open({
                animation: animationsEnabled,
                templateUrl: 'template/AddUserModalContent.html',
                controller: 'addUserController'
            });
            modalInstance.result.then(function (user) {
                serverService.createUser(user).then(function (answer) {
                    if (answer.status == 201) {
                        deferred.resolve();
                    }
                });
            });
            return deferred.promise;
        }
    }
});
/**
 * Server Service
 * Service that holds all possible server request
 *
 * Created by Kulinenko Roman
 */
app.factory('serverService', function ($http, $q) {

    var server = {
        restGET: '/api/users',
        restPOST: '/api/users',
        restPUT: '/api/users',
        restDELETE: '/api/users/'
    };

    return {
        getUsers: function (page, perPage) {
            var deferred = $q.defer();
            $http.get(server.restGET, {params: {page: page, perPage: perPage}}).then(function (response) {
                deferred.resolve(response.data);
            });
            return deferred.promise;
        },
        createUser: function (user) {
            return $http.post(server.restPOST, user);
        },
        deleteUser: function (userId) {
            return $http.delete(server.restDELETE + userId);
        },
        updateUser: function (user) {
            return $http.put(server.restPUT, user);
        }

    }
});
/**
 * Created by kulyadredd on 9/1/16.
 */
app.factory('userService', function ($http, $q) {

    function isInteger(x) {
        return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
    }

    return {
        pageControls: function (defaultPage, showPage, currentPage, pagesCount) {
            var pages = [];
            var i = defaultPage;
            var middleOfPages = showPage / 2;
            if (currentPage > Math.ceil(middleOfPages)) {
                var countRemovePage = Math.floor(middleOfPages);
                if (isInteger(middleOfPages))
                    countRemovePage = countRemovePage - 1;
                i = currentPage - countRemovePage;
            }
            var stop = i + showPage;
            for (i; i < stop; i++) {
                var style = 'btn-default';
                var isDisable = false;
                if (currentPage == i)
                    style = 'btn-info';
                else if (i > pagesCount)
                    isDisable = true;

                pages.push({
                    value: i,
                    style: style,
                    isDisable: isDisable
                });
            }
            return pages;
        }
        // getStartCount: function (currentPage, itemPerPage) {
        //     return (currentPage * itemPerPage) - itemPerPage;
        // }
    }
});